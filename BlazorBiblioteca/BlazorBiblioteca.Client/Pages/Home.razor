@page "/"
@using BlazorBootstrap
@using BlazorBiblioteca.Shared
@inject HttpClient Http

<PageTitle>Libros</PageTitle>
Estado de la conexión
<p>@conexionServidor</p>
<p>@conexionLibros</p>
<h2>FORMULARIO</h2>
<div>
    <EditForm Model="@libro" OnValidSubmit="CreateOrUpdateLibro" FormName="createOrUpdate">
        <DataAnnotationsValidator/>

        <label for="nombre">Nombre libro:</label>
        <TextInput Id="nombre" @bind-Value="libro!.NombreLibro"/>
        <ValidationMessage For="@(() => libro.NombreLibro)"/>

        <label for="autor">Autor libro:</label>
        <TextInput Id="autor" @bind-Value="libro!.Autor"/>
        <ValidationMessage For="@(() => libro.Autor)"/>

        <label for="num">Numero de paginas</label>
        <NumberInput id="num" TValue="int" @bind-Value="libro.NumPaginas"/>
        <ValidationMessage For="@(() => libro.NumPaginas)"/>

        <label for="fecha">Fecha de Publicacion:</label>
        <DateInput id="fecha" TValue="DateTime" @bind-Value="libro.FechaPublicacion"/>
        <Button Size="ButtonSize.Large" Type="ButtonType.Submit" Color="ButtonColor.Success"> Guardar libro</Button>
    </EditForm>

    @if (message.Contains("actualizado"))
    {
        <Alert Color="AlertColor.Warning"> @message </Alert>
    }
    else if (message.Contains("ingresado"))
    {
        <Alert Color="AlertColor.Success"> @message </Alert>
    }
    else if (!string.IsNullOrEmpty(message))
    {
        <Alert Color="AlertColor.Danger"> @message </Alert>
    }
    
    <div class="column">
        @if (libros.Count == 0)
        {
            <h3>No existen libros en la biblioteca actualmente. @message </h3>
        }
        else
        {
            <p><strong>LISTADO LIBROS</strong></p>
            <table border="1">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Autor</th>
                    <th>Numero Paginas</th>
                    <th>Fecha Publicacion</th>
                    <th>Actualizar</th>
                    <th>Eliminar</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var libro in libros)
                {
                    <tr @key="libro.Id">
                        <td>@libro.Id</td>
                        <td>@libro.NombreLibro</td>
                        <td>@libro.Autor</td>
                        <td>@libro.NumPaginas</td>
                        <td>@libro.FechaPublicacion</td>
                        <td>
                            <Button @onclick="() => this.libro = libro" Size="ButtonSize.Medium" Color="ButtonColor.Warning"> Actualizar </Button>
                        </td>
                        <td>
                            <Button @onclick="() => DeleteLibro(libro.Id)" Size="ButtonSize.Medium" Color="ButtonColor.Danger"> Eliminar </Button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    string url = "https://localhost:7227/";
    string conexionServidor = "Conectando..";
    string conexionLibros = "Conectando..";
    async Task ProbarConexion()
    {
        var respuesta = await Http.GetStringAsync(url + "api/Libro/ConexionServidor");
        conexionServidor = respuesta;

        var respuestaLibros = await Http.GetStringAsync(url + "api/Libro/ConexionLibros");
        conexionLibros = respuestaLibros;
    }

    protected override async Task OnInitializedAsync()
    {
        await ProbarConexion();
        await GetLibros();
    }

    string message = string.Empty;
    List<Libro> libros = new List<Libro>();

    [SupplyParameterFromForm(FormName = "createOrUpdate")]
    Libro libro { get; set; } = new();

    async Task GetLibros()
    {
        try
        {
            var movies = await Http.GetFromJsonAsync<List<Libro>>(url + "api/Libro/LibrosListar");
            libros = movies;
        }
        catch (Exception ex)
        {
            message = ex.Message;
        }
    }

    async Task CreateOrUpdateLibro()
    {
        if (libro.Id == 0)
            await CreateLibro();
        else
            await UpdateLibro();
    }

    async Task CreateLibro()
    {
        var res = await Http.PostAsJsonAsync(url + "api/Libro/LibroAgregar", libro);

        if (res.IsSuccessStatusCode)
        {
            message = "Se ha ingresado un nuevo libro en la Biblioteca";
            libro = new();
        }
        else
        {
            message = "Error al ingresar nuevo Libro";
        }

        await GetLibros();
    }

    async Task UpdateLibro()
    {
        var res = await Http.PutAsJsonAsync<Libro>(url + "api/Libro/libro/" + libro.Id, libro);

        if (res.IsSuccessStatusCode) message = $"Se ha actualizado el Libro {libro.NombreLibro}";
        else message = $"Error al actualizar Libro {libro.NombreLibro}";

        libro = new();

        await GetLibros();
    }

    async Task DeleteLibro(int id)
    {
        var res = await Http.DeleteAsync(url + $"api/Libro/libro/{id}");

        if (res.IsSuccessStatusCode)
        {
            message = "Libro eliminado correctamente";
            await GetLibros();
        }
        else
        {
            message = "Error al eliminar libro";
        }
    }

}
